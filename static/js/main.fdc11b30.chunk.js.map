{"version":3,"sources":["hooks/useTitlePage.ts","components/Ecosystem.tsx","App.tsx","index.tsx"],"names":["useTitlePage","newTitle","useState","title","setTitle","useEffect","document","Ecosystem","className","href","target","rel","scripts","command","yarn","npm","description","id","Math","random","toString","App","isAlertShow","setIsAlertShow","isInputProjectShow","setIsInputProjectShow","inputProject","setInputProject","isAutoInstallEnable","setIsAutoInstallEnable","type","isActive","cloneCommands","setCloneCommands","message","status","alert","setAlert","writeClipboard","payload","navigator","clipboard","writeText","then","catch","getActiveCloneCommand","result","filter","yarnAutoInstallCommand","npmAutoInstallCommand","interval","setInterval","clearInterval","AutoInstallCommandComponent","onClick","aria-hidden","src","alt","data-testid","data-icon","data-size","data-show-count","aria-label","map","newCloneCommands","cloneCommand","switchCloneCommand","placeholder","onChange","e","value","replace","htmlFor","checked","script","ReactDOM","render","StrictMode","getElementById","undefined"],"mappings":"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","file":"static/js/main.fdc11b30.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nconst useTitlePage = (\r\n  newTitle: string\r\n): (string | React.Dispatch<React.SetStateAction<string>>)[] => {\r\n  const [title, setTitle] = useState(newTitle)\r\n\r\n  useEffect(() => {\r\n    document.title = title\r\n  }, [title])\r\n\r\n  return [title, setTitle]\r\n}\r\n\r\nexport default useTitlePage\r\n","import React from 'react'\r\n\r\nconst Ecosystem = (): React.ReactElement => (\r\n  <section className=\"ecosystem\">\r\n    <h2>Ecosystem</h2>\r\n    <ol>\r\n      <li>\r\n        <a\r\n          href=\"https://reactrouter.com/web/guides/quick-start\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          react-router\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          href=\"https://github.com/pmndrs/jotai\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          jotai\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          href=\"https://reactcommunity.org/react-transition-group/\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          react-transition-group\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          href=\"https://testing-library.com/docs/react-testing-library/intro/\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          testing-library\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          React Developer Tools\r\n        </a>\r\n      </li>\r\n    </ol>\r\n  </section>\r\n)\r\n\r\nexport default Ecosystem\r\n","import React, { ReactElement, useEffect, useState } from 'react'\r\nimport useTitlePage from '@/hooks/useTitlePage'\r\nimport Ecosystem from '@/components/Ecosystem'\r\nimport '@/style.css'\r\n\r\ninterface AlertProps {\r\n  message: string\r\n  status: 'success' | 'error'\r\n}\r\n\r\ninterface CloneCommandProps {\r\n  command: string\r\n  isActive: boolean\r\n  id: string\r\n  type: 'HTTPS' | 'SSH'\r\n}\r\n\r\ninterface ScriptProps {\r\n  command: {\r\n    yarn?: string\r\n    npm?: string\r\n  }\r\n  description: string\r\n  id: string\r\n}\r\n\r\nconst scripts: ScriptProps[] = [\r\n  {\r\n    command: {\r\n      yarn: 'yarn start',\r\n      npm: 'npm run start',\r\n    },\r\n    description:\r\n      'Start the app and open http://localhost:3000 to view it in the browser.',\r\n    id: Math.random().toString(),\r\n  },\r\n  {\r\n    command: {\r\n      yarn: 'yarn test',\r\n      npm: 'npm run test',\r\n    },\r\n    description: 'Launches the test runner in the interactive watch mode.',\r\n    id: Math.random().toString(),\r\n  },\r\n  {\r\n    command: {\r\n      yarn: 'yarn build',\r\n      npm: 'npm run build',\r\n    },\r\n    description:\r\n      'It correctly bundles React in production mode and optimizes the build for the best performance.',\r\n    id: Math.random().toString(),\r\n  },\r\n  {\r\n    command: {\r\n      yarn: 'yarn lint',\r\n      npm: 'npm run lint',\r\n    },\r\n    description: 'Fix all error because ESlint.',\r\n    id: Math.random().toString(),\r\n  },\r\n  {\r\n    command: {\r\n      yarn: 'yarn reset',\r\n      npm: 'npm run reset',\r\n    },\r\n    description:\r\n      'Delete all files, folders, and code which related to landing page.',\r\n    id: Math.random().toString(),\r\n  },\r\n]\r\n\r\nconst App = (): ReactElement => {\r\n  useTitlePage('React Typescript App')\r\n  const [isAlertShow, setIsAlertShow] = useState(false)\r\n  const [isInputProjectShow, setIsInputProjectShow] = useState(false)\r\n  const [inputProject, setInputProject] = useState('')\r\n  const [isAutoInstallEnable, setIsAutoInstallEnable] = useState(false)\r\n  const [cloneCommands, setCloneCommands] = useState<CloneCommandProps[]>([\r\n    {\r\n      id: Math.random().toString(),\r\n      type: 'HTTPS',\r\n      command:\r\n        'git clone https://github.com/alfianandinugraha/create-react-typescript-app.git',\r\n      isActive: true,\r\n    },\r\n    {\r\n      id: Math.random().toString(),\r\n      type: 'SSH',\r\n      command:\r\n        'git clone git@github.com:alfianandinugraha/create-react-typescript-app.git',\r\n      isActive: false,\r\n    },\r\n  ])\r\n  const [alert, setAlert] = useState<AlertProps>({\r\n    message: 'Failed to copy, please use modern browser',\r\n    status: 'error',\r\n  })\r\n\r\n  const inputProjectHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputProject(e.target.value.replace(' ', '-'))\r\n  }\r\n\r\n  const writeClipboard = (payload: string) => {\r\n    setIsAlertShow(true)\r\n    try {\r\n      navigator.clipboard\r\n        .writeText(payload)\r\n        .then(() => {\r\n          setAlert({\r\n            message: 'Command copied ! 🚀🚀🚀',\r\n            status: 'success',\r\n          })\r\n        })\r\n        .catch(() => {\r\n          setAlert({\r\n            message: 'Failed to copy, please use modern browser',\r\n            status: 'error',\r\n          })\r\n        })\r\n    } catch {\r\n      setAlert({\r\n        message: 'Failed to copy, please use modern browser',\r\n        status: 'error',\r\n      })\r\n    }\r\n  }\r\n\r\n  const switchCloneCommand = (type: CloneCommandProps['type']) => {\r\n    const newCloneCommands = cloneCommands.map((cloneCommand) => ({\r\n      ...cloneCommand,\r\n      isActive: type === cloneCommand.type,\r\n    }))\r\n\r\n    setCloneCommands(newCloneCommands)\r\n  }\r\n\r\n  const getActiveCloneCommand = () => {\r\n    let result = cloneCommands.filter((command) => command.isActive)[0].command\r\n\r\n    if (!inputProject) return result\r\n\r\n    if (isInputProjectShow) {\r\n      result += ` \"${inputProject}\"`\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  const yarnAutoInstallCommand = () =>\r\n    `${getActiveCloneCommand()} && yarn install --cwd \"${\r\n      inputProject || 'create-react-typescript-app'\r\n    }\"`\r\n\r\n  const npmAutoInstallCommand = () =>\r\n    `${getActiveCloneCommand()} && cd \"${\r\n      inputProject || 'create-react-typescript-app'\r\n    }\" && npm install && cd \"..\"`\r\n\r\n  useEffect(() => {\r\n    if (!isAlertShow) return\r\n\r\n    const interval = setInterval(() => {\r\n      setIsAlertShow(false)\r\n    }, 2000)\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [isAlertShow])\r\n\r\n  const AutoInstallCommandComponent = () => (\r\n    <section className=\"code-group\">\r\n      <section className=\"code-block\">\r\n        <p>Yarn</p>\r\n        <code\r\n          onClick={() => writeClipboard(yarnAutoInstallCommand())}\r\n          aria-hidden=\"true\"\r\n        >\r\n          {yarnAutoInstallCommand()}\r\n        </code>\r\n      </section>\r\n      <section className=\"code-block\">\r\n        <p>NPM</p>\r\n        <code\r\n          onClick={() => writeClipboard(npmAutoInstallCommand())}\r\n          aria-hidden=\"true\"\r\n        >\r\n          {npmAutoInstallCommand()}\r\n        </code>\r\n      </section>\r\n    </section>\r\n  )\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      {isAlertShow && (\r\n        <section className={`alert alert--${alert.status}`}>\r\n          <p>{alert.message}</p>\r\n        </section>\r\n      )}\r\n      <a\r\n        className=\"fork\"\r\n        href=\"https://github.com/alfianandinugraha/create-react-typescript-app\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n      >\r\n        <img src=\"/github-icon.svg\" alt=\"github icon\" />\r\n        <span>\r\n          Star me on <b>GitHub</b>\r\n        </span>\r\n      </a>\r\n      <section className=\"wrapper\">\r\n        <img src=\"/logo192.png\" alt=\"react icon\" className=\"react-logo\" />\r\n        <div className=\"icon-group\">\r\n          <img src=\"/typescript.svg\" alt=\"typescipt icon\" />\r\n          <img src=\"/eslint.svg\" alt=\"eslint icon\" />\r\n          <img src=\"/prettier.png\" alt=\"prettier icon\" />\r\n        </div>\r\n        <h1 className=\"heading\" data-testid=\"title\">\r\n          Create React{' '}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href=\"https://www.typescriptlang.org/\"\r\n          >\r\n            Typescript\r\n          </a>{' '}\r\n          App\r\n        </h1>\r\n        <section className=\"stat\">\r\n          <section className=\"stat__item\">\r\n            <a\r\n              className=\"github-button\"\r\n              href=\"https://github.com/alfianandinugraha/create-react-typescript-app\"\r\n              data-icon=\"octicon-star\"\r\n              data-size=\"large\"\r\n              data-show-count=\"true\"\r\n              aria-label=\"Star alfianandinugraha/create-react-typescript-app on GitHub\"\r\n            >\r\n              Star\r\n            </a>\r\n          </section>\r\n          <section className=\"stat__item\">\r\n            <a\r\n              className=\"github-button\"\r\n              href=\"https://github.com/alfianandinugraha/create-react-typescript-app/fork\"\r\n              data-icon=\"octicon-repo-forked\"\r\n              data-size=\"large\"\r\n              data-show-count=\"true\"\r\n              aria-label=\"Fork alfianandinugraha/create-react-typescript-app on GitHub\"\r\n            >\r\n              Fork\r\n            </a>\r\n          </section>\r\n          <section className=\"stat__item\">\r\n            <a\r\n              className=\"github-button\"\r\n              href=\"https://github.com/alfianandinugraha/create-react-typescript-app/archive/HEAD.zip\"\r\n              data-icon=\"octicon-download\"\r\n              data-size=\"large\"\r\n              aria-label=\"Download alfianandinugraha/create-react-typescript-app on GitHub\"\r\n            >\r\n              Download\r\n            </a>\r\n          </section>\r\n        </section>\r\n        <section className=\"installation\">\r\n          <section className=\"menu-bar\">\r\n            {cloneCommands.map((command) => (\r\n              <span\r\n                className={`menu-bar__item ${\r\n                  command.isActive ? 'menu-bar__item--active' : ''\r\n                }`}\r\n                onClick={() => switchCloneCommand(command.type)}\r\n                aria-hidden=\"true\"\r\n                key={command.id}\r\n              >\r\n                {command.type}\r\n              </span>\r\n            ))}\r\n          </section>\r\n          <section\r\n            className=\"toggle-input\"\r\n            onClick={() => setIsInputProjectShow(!isInputProjectShow)}\r\n            aria-hidden=\"true\"\r\n          >\r\n            {!isInputProjectShow ? 'Show ' : 'Close '}Custom Project Name\r\n          </section>\r\n          {isInputProjectShow && (\r\n            <section className=\"input-project\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-project-name\"\r\n                placeholder=\"Project / folder name (optional)\"\r\n                onChange={inputProjectHandler}\r\n                value={inputProject}\r\n              />\r\n              <label\r\n                htmlFor=\"auto-install-checkbox\"\r\n                className=\"checkbox\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"auto-install-checkbox\"\r\n                  checked={isAutoInstallEnable}\r\n                  onChange={() => {\r\n                    setIsAutoInstallEnable(!isAutoInstallEnable)\r\n                  }}\r\n                />\r\n                <span>Auto install package</span>\r\n              </label>\r\n            </section>\r\n          )}\r\n          {isAutoInstallEnable && isInputProjectShow ? (\r\n            <AutoInstallCommandComponent />\r\n          ) : (\r\n            <section className=\"code-block\">\r\n              <code\r\n                onClick={() => writeClipboard(getActiveCloneCommand())}\r\n                aria-hidden=\"true\"\r\n              >\r\n                {getActiveCloneCommand()}\r\n              </code>\r\n            </section>\r\n          )}\r\n        </section>\r\n        <section className=\"scripts\">\r\n          <h2>Available Scripts</h2>\r\n          <section className=\"scripts__wrapper\">\r\n            {scripts.map((script) => (\r\n              <div className=\"script__item\" key={script.id}>\r\n                <div className=\"code-block\">\r\n                  <code\r\n                    onClick={() => writeClipboard(script.command.yarn || '')}\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    {script.command.yarn}\r\n                  </code>\r\n                  <span>or</span>\r\n                  <code\r\n                    onClick={() => writeClipboard(script.command.npm || '')}\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    {script.command.npm}\r\n                  </code>\r\n                </div>\r\n                <p>{script.description}</p>\r\n              </div>\r\n            ))}\r\n          </section>\r\n        </section>\r\n        <Ecosystem />\r\n        <section className=\"contribute\">\r\n          <h2>Contribute</h2>\r\n          <p>\r\n            Please visit{' '}\r\n            <a\r\n              href=\"https://github.com/alfianandinugraha/create-react-typescript-app\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Create React Typescript App\r\n            </a>\r\n          </p>\r\n        </section>\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n  undefined\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}